1.静态文件：css,js,图片，Json文件，字体文件等
		①配置setting.py STATICFILES_DIRS = [BASE_DIR+'/static', ]
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>主页</title>
    <link rel="stylesheet" type="text/css" href="/static/myApp/css/style.css">
    <script type="text/javascript" src="/static/myApp/js/jquery.js"></script>
    <script type="text/javascript" src="/static/myApp/js/sunck.js"></script>
</head>
<body>
    <h1>你是个好人</h1>
    <img src = "/static/myApp/img/1.jpg">
</body>
</html>

2.中间件：
	概述：一个轻量级、底层的插件，可以介入Django的请求和确定
	本质：一个Python类
	方法：
		①：_init_:不需要传参，服务器响应第一个请求时自动，用于确定是否启动该中间件。
		②：process_request(request):在执行视图之前被调用（分配url匹配视图之前，每个请求都会调用，返回None或者HttpResponse对象）
		③：process_view(request,view_func,view_args,view_kwargs)
		④：process_template_response(self,request,reponse)：在视图刚好执行完后调用，每个请求都会调用，返回None或者HttpResponse对象）
		⑤：process_response(self,request,reponse)：所有响应放回游览器之前调用，每个请求都会调用，返回HttpResponse对象
		⑥：process_exception(self,request_execption)：当视图抛出异常时调用，返回HttpResponse对象
		
	流程：（②）->url(③)->view(④)->template(⑤)->

	自定义中间件：test->middleware->myApp->myMiddle.py

	使用自定义中间件文件，配置setting.py文件，在MIDDLEWARE中添加路径

3.上传图片：
	概述：文件上传时，文件数据存储在requestFILES属性（服务器）中
	存储路径：在static目录下创建upfile目录用于存储接受上传的文件。配置setting.py文件，添加上传目录
		form表单上传文件：enctype="multipart/form-data"

4.分页：
	Paginator对象：
		创建对象：Paginator(列表，整数)，返回一个分页对象
		属性：count 对象总数
		      num_pages 页面总数
		      page_range 页面列表
		方法：	page（num）：获得一个Page对象，如果提供的页面不存在会抛出异常‘InvaldPage’
	Page对象：
		创建对象：Paginator对象的page（）方法返回得到Page对象
		属性：object_list 当前页上所有数据对象
		      number 当前页的页面值
		      paginator 当前page对象关联的paginator对象

		方法：	has_nest():判断是否有下一页，如果有返回True
			has_previous():判断是否有上一页，如果有返回True
			has_other_pages():判断是否有其他页，如果有返回Ture
			next_page_number():返回下一页的页面，如果下一页不存在，抛出异常
			previous_page_number():返回上一页的页面，如果上一页不存在，抛出异常
			len():返回当前页的数据个数
			

5.ajax:需要动态生成，请求JSON数据

6.富文本：
	在站点中使用，进行配置。  略。。。
	在自定义页面中使用。

7.celery: